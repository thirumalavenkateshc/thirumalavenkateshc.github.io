/*
 * Sample IoT APIs
 *
 * These are public domain APIs, currently used for demo purpose.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EnvironmentApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="days"></param>
        /// <response code="200">the forecast</response>
        [HttpGet]
        [Route("/thirumalavenkateshc/IOTAPI/1.0.0/temperature/forecast/{days}")]
        [ValidateModelState]
        [SwaggerOperation("GetForecast")]
        [SwaggerResponse(statusCode: 200, type: typeof(ForecastResponse), description: "the forecast")]
        public virtual IActionResult GetForecast([FromRoute][Required]int? days)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ForecastResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"city\" : {\n    \"country\" : \"country\",\n    \"name\" : \"name\",\n    \"lon\" : 1.4658129805029452,\n    \"id\" : 0,\n    \"lat\" : 6.027456183070403\n  },\n  \"values\" : [ {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"temperature\" : {\n      \"high\" : 3.616076749251911,\n      \"low\" : 9.301444243932576,\n      \"night\" : 1.2315135367772556,\n      \"evening\" : 7.386281948385884,\n      \"day\" : 4.145608029883936,\n      \"morning\" : 2.027123023002322\n    },\n    \"weather\" : {\n      \"summary\" : \"summary\",\n      \"icon\" : \"icon\",\n      \"description\" : \"description\"\n    },\n    \"humidity\" : 5,\n    \"pressure\" : 5.962133916683182,\n    \"clouds\" : 7,\n    \"windSpeed\" : 2.3021358869347655\n  }, {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"temperature\" : {\n      \"high\" : 3.616076749251911,\n      \"low\" : 9.301444243932576,\n      \"night\" : 1.2315135367772556,\n      \"evening\" : 7.386281948385884,\n      \"day\" : 4.145608029883936,\n      \"morning\" : 2.027123023002322\n    },\n    \"weather\" : {\n      \"summary\" : \"summary\",\n      \"icon\" : \"icon\",\n      \"description\" : \"description\"\n    },\n    \"humidity\" : 5,\n    \"pressure\" : 5.962133916683182,\n    \"clouds\" : 7,\n    \"windSpeed\" : 2.3021358869347655\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ForecastResponse>(exampleJson)
                        : default(ForecastResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>gets the state of the heater</remarks>
        /// <param name="zoneId"></param>
        /// <response code="200">heater state</response>
        [HttpGet]
        [Route("/thirumalavenkateshc/IOTAPI/1.0.0/temperature/{zoneId}/heater")]
        [ValidateModelState]
        [SwaggerOperation("GetHeaterState")]
        [SwaggerResponse(statusCode: 200, type: typeof(HeaterState), description: "heater state")]
        public virtual IActionResult GetHeaterState([FromRoute][Required]string zoneId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(HeaterState));
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : \"id\",\n  \"state\" : \"state\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<HeaterState>(exampleJson)
                        : default(HeaterState);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="zoneId"></param>
        /// <response code="200">Zone temperature</response>
        [HttpGet]
        [Route("/thirumalavenkateshc/IOTAPI/1.0.0/temperature/{zoneId}")]
        [ValidateModelState]
        [SwaggerOperation("GetZoneTemperature")]
        [SwaggerResponse(statusCode: 200, type: typeof(TemperatueZoneStatus), description: "Zone temperature")]
        public virtual IActionResult GetZoneTemperature([FromRoute][Required]string zoneId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TemperatueZoneStatus));
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"units\" : \"fahrenheit\",\n  \"value\" : 5.962133916683182,\n  \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<TemperatueZoneStatus>(exampleJson)
                        : default(TemperatueZoneStatus);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>turns the heater on or off</remarks>
        /// <param name="zoneId"></param>
        /// <param name="state"></param>
        /// <response code="200">Status of the operation</response>
        [HttpPost]
        [Route("/thirumalavenkateshc/IOTAPI/1.0.0/temperature/{zoneId}/heater/{state}")]
        [ValidateModelState]
        [SwaggerOperation("SetHeaterState")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "Status of the operation")]
        public virtual IActionResult SetHeaterState([FromRoute][Required]string zoneId, [FromRoute][Required]bool? state)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"message\" : \"everything is ok\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
                        : default(ApiResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <response code="200">ok</response>
        [HttpGet]
        [Route("/thirumalavenkateshc/IOTAPI/1.0.0/temperature")]
        [ValidateModelState]
        [SwaggerOperation("TemperatureSummary")]
        [SwaggerResponse(statusCode: 200, type: typeof(TemperatureSummary), description: "ok")]
        public virtual IActionResult TemperatureSummary()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TemperatureSummary));
            string exampleJson = null;
            exampleJson = "{\n  \"zoneStatus\" : [ {\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"units\" : \"fahrenheit\",\n    \"value\" : 5.962133916683182,\n    \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"units\" : \"fahrenheit\",\n    \"value\" : 5.962133916683182,\n    \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"zones\" : [ {\n    \"inputPosition\" : 6,\n    \"outputPosition\" : 1,\n    \"zone\" : \"zone\",\n    \"name\" : \"name\",\n    \"id\" : 0\n  }, {\n    \"inputPosition\" : 6,\n    \"outputPosition\" : 1,\n    \"zone\" : \"zone\",\n    \"name\" : \"name\",\n    \"id\" : 0\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<TemperatureSummary>(exampleJson)
                        : default(TemperatureSummary);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
